/**
 * 生成一个不安全的随机浮点数
 *
 * @returns 返回不安全的随机浮点数，该随机数大于等于 `0` 且小于 `1`
 * @note
 *
 * - {@link Math.random} 方法会生成一个随机数，它是一个大于等于 `0` 且小于 `1` 的浮点数，小数点后面包含 `11 - 21` 位数字。
 *   `Number` 的最大安全整数为 `2^53-1` (`9007199254740991`)，所以在转换为整数时，需要通过 `isIntSafe` 方法来判断数字是否安全
 * - `Math.random` 是不安全的，但是生成随机数的速度非常的快
 * - 如果想生成慢速且安全的随机数，请使用 `randomSafe` 方法
 *
 * ### 伪随机数生成器
 *
 * 由于真随机数来自于计算机外部，获得的代价往往较高，
 * 而在计算机的应用场景中我们也并不总是要求随机数都有真随机那么高的不确定性，
 * 所以这就衍生出了对伪随机的需求。设计良好的算法产生的随机序列能够以假乱真，
 * 大部分计算机程序和语言中的随机函数，都是伪随机数生成器，它们都是由确定的算法，
 * 通过一个**种子** (比如：时间)，来产生**看起来随机**的结果。
 * 产生伪随机数的算法被叫做**伪随机数生成器**。
 *
 * JS 中的 `Math.random()` 是一个伪随机数生成器函数，它是不安全的。为了尽可能的保证安全，
 * 就需要 `Crypto` 对象，并调用其 `getRandomValues` 方法来获得一个相对安全的随机数。
 */
export default function random() {
    return Math.random();
}
