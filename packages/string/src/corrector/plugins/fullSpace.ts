import { mapReplace } from '@curong/regexp';

import { symbolGroup as g, symbol as s } from '../constants';

const ss = '\u00A1-\u00FF\u0370-\u03FF\u2150-\u218F\u2700—\u27BF';

// 加减乘除运算符
//
// NOTE:
//  - 没有匹配两个 `==`，因为它有可能是 `Markdown` 中使用的 `==xxx==`
//  - 没有匹配一个 `*`，因为有有可能是 `Markdown` 中的 `*xxx*`
const or =
    '<{1,3}|>{1,3}|[&|]{1,2}|\\?{2}|(?:[-+*/<>!%&|^~]|>>|<<)=|={3}|[-+/=%^]';

/** 字母区间 */
const w = 'a-zA-Z';

/** 数字区间 */
const d = '0-9';

/** 字母和数字区间 */
const wd = `${w}${d}`;

/** 将字符串数组转换为正则表达式数组 */
const toRegexp = (regexpsString: string[], flag: string = 'g') => {
    return regexpsString.map(r => new RegExp(r, flag));
};

/** 用于处理空格的映射表 */
const handleSpacesMap = [
    // 给三个字符之间添加两个空格
    {
        token: '$1 $2 $3',
        regexps: [
            // 话题 `#xxx#`
            `(${g})(#${g}+#)(${g})`,

            // 加减乘除计算
            `(${g}) ?(${or}) ?([${wd}])`,
            `([${wd}]) ?(${or}) ?(${g})`
        ]
    },

    // 给两个字符之间添加一个空格
    {
        token: '$1 $2',
        regexps: [
            // 单引号
            `(')(${g})`,
            `(${g})('[^s])`,
            // 百分比、摄氏度、华氏度、列氏度、牛顿温标
            `([${d}](?:%|℉|°(?:C|R[eé]|F|N)))([${w}])`,
            // 双引号，反引号
            `(${g})([\`"״])`,
            `([\`"״])(${g})`,
            // 话题
            `(${g})(#([^ ]))`,
            `([^ ]#)(${g})`,
            // 冒号后的
            `([${w}]:)(${g})`,
            `(${g}:)([${d}()])`,
            // 下划线、波浪线、星号、双等号、加加、减减
            `(${g})((?:[_~*]{1,2}|[-+=]{2})[${wd}])`,
            `([${wd}](?:[_~*]{1,2}|[-+=]{2}))(${g})`,
            // 括号
            `(${g})([\\[({<>“])`,
            `([\\])}<>”%])(${g})`,
            // 英文括号
            `([${wd}])([(\\[{])`,
            `([)\\]}])([${wd}])`,
            // 省略号
            `(\\.{3,6}|…{1,2})(${g})`,
            // 中文双引号
            `([${wd}${s}]) *(“[-${wd}${s}_ ]+”)`,
            `(“[-${wd}${s}_ ]+”) *([${wd}${s}])`,
            // 中英
            `([-${wd}$%^&*+\\\\=|/~!;:,.?${ss}])(${g})`,
            `(${g})([-${wd}$%^&*+\\\\=|/@${ss}])`
        ]
    },

    // 在三个字符之间删除两个空格
    {
        token: '$1$2$3',
        regexps: [
            // `xxx_xxx`
            `([${w}]) *(_) *([${w}])`,
            // 路径
            `([/.])([-${w}_./]+) ([/])`,
            // 引号中的
            `([\`"“״]+) *(.+?) *([\`"”״]+)`,
            // 括号中的
            `([(\\[{<]+) *(.+?) *([)\\]}>]+)`,
            // `HTML` 标记
            `(<[^>]*>) *(${g}.*?|.*?${g}) *(<\\/[^>]*>)`,
            // `Markdown` 中的斜体和加粗
            ` *(\\*{1,2}) *(${g}.*?|.*?${g}) *(\\*{1,2}) *`
        ]
    },

    // 在两个字符之间删除一个空格
    {
        token: '$1$2',
        regexps: [
            // 100% || 36°C || 1℉
            `([${d}]) +([%°℉])`,
            // 路径 `/ xxx.xxx/xxx_xxx`
            `([/\\\\]) +([-${w}_./\\\\]+)`,
            // 省略号
            `(${g}) +(\\.{3,6}|…{1,2})`,
            // 复词
            `([${wd}${s}]) +('s) `,
            // 删除字母和加加、减减之间的多余空格
            `([\\w$]) +([-+]{2})`,
            `([-+]{2}) +([\\w$])`
        ]
    }
];

/**
 * 为字符的左侧或右侧按需添加或删除相应的空格
 *
 * @param value  要处理的字符串
 * @returns 返回处理的好的内容
 */
export function fullSpace(value: string): string {
    return handleSpacesMap.reduce((memo, { token, regexps }) => {
        return mapReplace(toRegexp(regexps), memo, token);
    }, value);
}
