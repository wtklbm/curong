import { ideographic } from '..';

describe('@curong/regexp/ideographic', () => {
    const ideographicRegex = new RegExp(ideographic);

    test('should match valid ideographic characters', () => {
        // ÊµãËØïÊúâÊïàÁöÑË°®ÊÑèÊñáÂ≠óÔºàÊ±âÂ≠óÔºâ
        const validIdeographs = [
            'Ê±â', // Ê±âÂ≠ó
            'Â≠ó', // Ê±âÂ≠ó
            '‰Ω†', // Ê±âÂ≠ó
            'Â•Ω', // Ê±âÂ≠ó
            'Êàë', // Ê±âÂ≠ó
            'Áà±', // Ê±âÂ≠ó
            'Â≠¶', // Ê±âÂ≠ó
            '‰∏≠Êñá', // ÁªÑÂêàÊ±âÂ≠ó
            'Â≠¶‰π†', // ÁªÑÂêàÊ±âÂ≠ó
            'ÊµãËØï' // ÁªÑÂêàÊ±âÂ≠ó
        ];

        validIdeographs.forEach(char => {
            expect(ideographicRegex.test(char)).toBe(true);
        });
    });

    test('should not match invalid characters', () => {
        // ÊµãËØïÊó†ÊïàÁöÑÂ≠óÁ¨¶
        const invalidCharacters = [
            'A', // Êãâ‰∏ÅÂ≠óÊØç
            '1', // Êï∞Â≠ó
            ' ', // Á©∫Ê†º
            '„Ç¢', // ÁâáÂÅáÂêç
            'üòä', // Ë°®ÊÉÖÁ¨¶
            '\u200B', // Èõ∂ÂÆΩÁ©∫Ê†º
            '!', // ÊÑüÂèπÂè∑
            '@', // Ôº†Á¨¶
            'Í∞Ä' // Èü©ÊñáÂ≠óÁ¨¶
        ];

        invalidCharacters.forEach(char => {
            expect(ideographicRegex.test(char)).toBe(false);
        });
    });

    test('should match strings with mixed characters', () => {
        // ÊµãËØïÂåÖÂê´Ë°®ÊÑèÊñáÂ≠óÁöÑÊ∑∑ÂêàÂ≠óÁ¨¶‰∏≤
        const mixedStrings = [
            'Hello Ê±âÂ≠ó', // ÂåÖÂê´Ê±âÂ≠ó
            '‰Ω†Â•Ω', // ‰ªÖÊ±âÂ≠ó
            'A ‰Ω† B', // ÂåÖÂê´Ê±âÂ≠ó
            'This is a ÊµãËØï' // ÂåÖÂê´Ê±âÂ≠ó
        ];

        mixedStrings.forEach(str => {
            expect(ideographicRegex.test(str)).toBe(true);
        });
    });

    test('should not match strings with no ideographic characters', () => {
        // ÊµãËØïÊ≤°ÊúâË°®ÊÑèÊñáÂ≠óÁöÑÂ≠óÁ¨¶‰∏≤
        const noIdeographicStrings = [
            'Hello World', // ‰ªÖÊãâ‰∏ÅÂ≠óÊØç
            '123456', // ‰ªÖÊï∞Â≠ó
            '„Ç¢„É™„Ç¨„Éà„Ç¶', // ‰ªÖÁâáÂÅáÂêç
            'üòäüòäüòä', // ‰ªÖË°®ÊÉÖÁ¨¶Âè∑
            ' ', // ‰ªÖÁ©∫Ê†º
            '!!!' // ‰ªÖÊ†áÁÇπ
        ];

        noIdeographicStrings.forEach(str => {
            expect(ideographicRegex.test(str)).toBe(false);
        });
    });

    test('should match edge cases', () => {
        expect(ideographicRegex.test('')).toBe(false); // Á©∫Â≠óÁ¨¶‰∏≤
        expect(ideographicRegex.test('\n')).toBe(false); // Êç¢Ë°åÁ¨¶
        expect(ideographicRegex.test('\t')).toBe(false); // Âà∂Ë°®Á¨¶
    });
});
